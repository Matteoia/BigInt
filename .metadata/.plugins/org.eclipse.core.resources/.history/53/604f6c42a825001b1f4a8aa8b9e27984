package poo.math;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;

public class BigIntLL extends AbstractBigInt{
	private LinkedList<Integer> cifre = new LinkedList<>();
	
	public BigIntLL(int x) {
		if(x < 0) throw new IllegalArgumentException();
		String numero = String.valueOf(x);
		for(int i=numero.length()-1; i>=0; i--) {
			cifre.add(Character.digit(numero.charAt(i), 10));
		}
	}//Il numero viene memorizzato al contrario per facilitare i metodi di modifica
	
	public BigIntLL(String numero) {
		if(!(numero.chars().allMatch( Character::isDigit ))) throw new IllegalArgumentException();
		numero = formatta(numero);
		for(int i=numero.length()-1; i>=0; i--) {
			cifre.add(Character.digit(numero.charAt(i), 10));
		}
	}//costruttore tramite stringa
	
	private String formatta(String numero) {
		if(numero.length() != 1) {
			StringBuilder ris = new StringBuilder();
			boolean inizio = true;
			for(int i=0; i<numero.length(); i++) {
				if(inizio && i!=numero.length()-1) {
					if(numero.charAt(i) != '0') {
						ris.append(numero.charAt(i));
						inizio = false;
					}
				}else {
					ris.append(numero.charAt(i));
				}		
			}
			return ris.toString();
		}
		else {
			return numero;
		}
	}//Se il numero ha 0 all'inizio questo verrà rimosso
	
	public BigIntLL(BigIntLL big) {
		ListIterator<Integer> it = this.listIterator();
		for(Integer i : big) 
			it.add(i);
	}
	
	public BigIntLL() {
		super();
	}
	
	@Override
	public BigIntLL factory(int x) {
		return new BigIntLL(x);
	}
	@Override
	public BigIntLL factory() {
		return new BigIntLL();
	}
	
	@Override
	public Iterator<Integer> iterator() {
		return cifre.iterator();
	}
	
	@Override
	public ListIterator<Integer> listIterator(){
		return cifre.listIterator();
	}

	@Override
	public int compareTo(BigInt o) {
		if(this.lenght() > o.lenght()) return 1;
		if(this.lenght() < o.lenght()) return -1;
		Iterator<Integer> it1 = this.iterator(), it2 = o.iterator();
		while(it1.hasNext()) {
			Integer n1 = it1.next(), n2 = it2.next();
			if(n1 > n2)
				return 1;
			if(n1 < n2)
				return -1;
		}
		return 0;
	}
	
	@Override
	public int lenght() {
		return cifre.size();
	}
	
	@Override
	public BigInt div(BigInt d) {
		//TODO
		return null;
	}
	
	@Override
	public BigInt rem(BigInt d) {
		//TODO
		return null;
	}
	
	@Override
	public BigInt pow(int exp) {
		//TODO
		return null;
	}
	
	public static void main(String[] args) {
		BigIntLL b1 = new BigIntLL("340");
		BigIntLL b2 = new BigIntLL("2476");
		System.out.println(b1.value());
	}
}
